* walter-compose-dev

* .env修正
開発者同士、portが当たらないように環境変数を変更
#+begin_src sh
$ cd /path/to/project
$ vi .env
#+end_src

* コンテナ作成
#+begin_src sh
$ cd /path/to/project
$ git clone https://github.com/knb-wkm/walter-compose-dev.git
$ cd walter-compose-dev
$ git clone https://github.com/knb-wkm/walter-02.git source
$ docker-compose build
$ docker-compose up -d
#+end_src

* mongo初期化
#+begin_src sh
$ docker-compose exec mongo bash -c "mongo walter --quiet /webapp/jobs/initDatabase.js"
$ docker-compose exec mongo mongo walter --eval 'db.getName()'
connecting to: mongodb://127.0.0.1:27017/walter
MongoDB server version: 3.4.10
walter
#+end_src

* オブジェクトストレージ初期化
#+begin_src sh
$ docker-compose exec swift swift -A http://127.0.0.1:8080/auth/v1.0 -U test:tester -K testing post [テナント名]
$ docker-compose exec swift swift -A http://127.0.0.1:8080/auth/v1.0 -U test:tester -K testing list [テナント名]
#+end_src

* データ作成
  - add-tenantは、"${テナント名}1"アカウント（管理者）、"${テナント名}2"アカウント（一般）を作成する。パスワードは「test」
  - add-timestamp-settingはtsaのid, pwを入力する
#+begin_src sh
$ docker-compose exec nodejs bash -c "cd /webapp && npm run add-tenant:dev [テナント名]"
$ docker-compose exec nodejs bash -c "cd /webapp && npm run init-elasticsearch:dev [テナント名]"
$ docker-compose exec nodejs bash -c "cd /webapp && npm run re-create-elastic-cache:dev [テナント名]"
$ docker-compose exec nodejs bash -c "cd /webapp && npm run add-timestamp-setting:dev [テナント名] [TSAユーザID] [TSAユーザPASSWORD]"
#+end_src

* imagemagick設定変更
ファイルのプレビュー機能を有効にするため以下の箇所を変更
#+begin_src sh
$ docker-compose exec nodejs bash
$ vi /etc/ImageMagick-6/policy.xml

@@ -69,6 +69,6 @@
   <!-- disable ghostscript format types -->
   <policy domain="coder" rights="none" pattern="PS" />
   <policy domain="coder" rights="none" pattern="EPS" />
-  <policy domain="coder" rights="none" pattern="PDF" />
+  <policy domain="coder" rights="read/write" pattern="PDF" />
   <policy domain="coder" rights="none" pattern="XPS" />
 </policymap>
#+end_src

* タイムスタンプアクションを画面上に表示させる方法
- 管理者でログイン
- ロール管理メニューに移動
- ロールにタイムスタンプアクションを追加

* NGINX 通信容量制限解放
　reactにproxyしているディレクティブに以下の記述で容量制限を１Gに変更する。

  client_max_body_size 1000m;

* ユーザ追加について
　画面からユーザ追加をした場合必ず管理者グループに所属させる必要がある
 
 または、管理者権限でユーザ用のフォルダを作成しておく必要がある。
 
　　TOPフォルダのファイル追加権限がそのグループにしかないため。
  
    ユーザHOMEや共有の概念があいまい？


* 容量集計のバッチ

#+begin_src sh
$ docker-compose exec nodejs bash -c "cd /webapp && npm run analyze"
#+end_src
